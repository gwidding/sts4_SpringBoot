<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.audio_mart.mapper.ProductMapper">

	<sql id="productColumns">
		product_id
		, cate_id
		, pname
		, pprice
		, stock
		, description
		, order_cnt
		, view_cnt
		, register_date
		, delete_yn
		, delete_date
		, update_date
	</sql>
	
	<!--  카테고리 호출 -->
	<select id="cateList" resultType="CategoryDTO">
		select * from category	
	</select>
	
	<insert id="insertProduct"  parameterType="ProductDTO">
		INSERT INTO product (
			product_id, cate_id, pname, pprice, stock, description, order_cnt
			, view_cnt, register_date, delete_yn, delete_date, update_date, thumb_name, thumb_path
		) VALUES (
			#{productId}, #{cateId}, #{pname}, #{pprice}, #{stock} ,#{description},0
			,1, now(), 'N', null, null, #{thumbName}, #{thumbPath}
		)
		<selectKey resultType="long" keyProperty="productId" order="AFTER">
	        SELECT LAST_INSERT_ID()
	    </selectKey>
	</insert>
	
	<insert id="insertImg" parameterType="java.util.List">
		INSERT INTO product_image (
			product_id, img_name, img_path, is_rep, delete_yn, memo
		) VALUES
		 <foreach collection="list" item="item" separator=","> 
		(
			#{item.productId}, #{item.imgName}, #{item.imgPath}, IFNULL(#{item.isRep}, 0), 'N', #{item.memo}
		)
		</foreach>
	</insert>
	
	<update id="updateImg" parameterType="ProductDTO">
		update 
			product
		set 
			thumb_img = #{thumbImg}
			, thumb_path = #{thumbPath}
		where
			product_id = #{productId}
	</update>
	
	<select id="findByProductId" parameterType="long" resultType="ProductDTO">
		SELECT
			product_id, p.cate_id, pname, pprice, stock, description, order_cnt, view_cnt, register_date
			, delete_yn, delete_date, update_date, c.cate_name
		FROM
			product p
		    join category c on p.cate_id = c.cate_id
		WHERE
			product_id = #{productId}
		ORDER BY
			product_id DESC, register_date DESC;
	</select>
	
	<update id="updateProduct" parameterType="ProductDTO">
		UPDATE product
		SET
			update_date = now()
		  	, cate_id = #{cateId}
			, pname = #{pname}
			, pprice = #{pprice}
			, stock = #{stock}
			, description =#{description}
		WHERE 
			product_id = #{productId}
	</update>
	
	<update id="deleteProduct" parameterType="long">
		UPDATE product
		SET
			delete_date = now()
			, delete_yn = 'Y'
		WHERE
			delete_yn = 'N'
		AND	product_id = #{productId}
	</update>
	
	<delete id="deleteCartForDeletion" parameterType="long">
		DELETE FROM cart
		WHERE product_id = #{productId}
			AND EXISTS (
				SELECT 1
				FROM product
				WHERE product_id = #{productId} AND delete_yn = 'Y'
		)
	</delete>
	
	<select id="productList">
		SELECT *
		FROM product
		WHERE delete_yn ='N'
		ORDER BY product_id DESC
	</select>
	
	<select id="deletionList">
		SELECT *
		FROM product
		WHERE delete_yn ='Y'
		ORDER BY delete_date desc, product_id DESC
	</select>
	
	<update id="increaseViewCnt" parameterType="long">
		UPDATE product
		SET view_cnt = view_cnt + 1
		WHERE product_id = #{productId}
	</update>
	
	<update id="increaseOrderCnt" parameterType="long">
		UPDATE product p
		JOIN orderDetail od ON p.product_id = od.product_id
		SET p.order_cnt = p.order_cnt + od.quantity
		WHERE od.order_id = #{orderId};
	</update>
	
	<update id="decreaseStock" parameterType="long">
		UPDATE product p
		JOIN orderDetail od ON p.product_id = od.product_id
		SET p.stock = p.stock - od.quantity
		WHERE od.order_id = #{orderId};
	</update>
	
</mapper>